{"version":3,"file":"multi-select-min.js","sources":["../src/dom-component.js","../src/defaults.js","../src/multi-select.js"],"sourcesContent":["const d = document;\r\n\r\nexport default class DomComponent {\r\n    constructor(element, options = {}, defaults = {}) {\r\n        this.options = Object.assign({}, defaults, options);\r\n\r\n        this._events = [];\r\n\r\n        this.dom = {\r\n            el: this._setElement(element)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Add/remove the toggling className\r\n     * @param {Boolean|undefined} show\r\n     * @return DomComponent\r\n     */\r\n    toggle(show = undefined) {\r\n        let classList = this.dom.el.classList;\r\n        if (show !== undefined) {\r\n            classList[show ? 'remove' : 'add']('si-off');\r\n            return this;\r\n        }\r\n        classList.toggle('si-off');\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Bind a (delegated) event\r\n     * @param {String} event\r\n     * @param {Function} fn\r\n     * @param {HTMLElement|Document} el\r\n     * @return DomComponent\r\n     */\r\n    on(event, fn, el = null) {\r\n\r\n        (el || this.dom.el).addEventListener(event, fn = fn.bind(this), true);\r\n\r\n        this._events.push({\r\n            name: event,\r\n            fn: fn,\r\n            el: el\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the main wrapping element\r\n     * @return {Element}\r\n     */\r\n    getElement() {\r\n        return this.dom.el;\r\n    }\r\n\r\n    /**\r\n     * Unbind all events and nullify references\r\n     * @return void\r\n     */\r\n    remove() {\r\n        this._events = this._events.filter(event => {\r\n            return (event.el || this.dom.el).removeEventListener(event.name, event.fn, true);\r\n        });\r\n        this.dom.el.parentNode.removeChild(this.dom.el);\r\n        this.dom = this.options = null;\r\n    }\r\n\r\n    /**\r\n     * Query the element in the DOM if its a string\r\n     * @param {Element|String} el\r\n     * @return {Element|null}\r\n     * @protected\r\n     */\r\n    _setElement(el) {\r\n        if (!el && !el.nodeType && typeof el !== 'string') {\r\n            throw new Error('Wrong element type provided!');\r\n        }\r\n        if (el.nodeType) return el;\r\n        return (this.options.parent || d).querySelector(el);\r\n    }\r\n\r\n    /**\r\n     * Communicate changes\r\n     * @param {String} name\r\n     * @param {Object|null} detail\r\n     * @protected\r\n     */\r\n    _trigger(name, detail = null) {\r\n        let event;\r\n\r\n        if (typeof CustomEvent === 'function') {\r\n            event = new CustomEvent(name, {\r\n                detail: detail,\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n        } else {\r\n            event = d.createEvent('CustomEvent');\r\n            event.initCustomEvent(name, true, true, detail);\r\n        }\r\n\r\n        this.dom.el.dispatchEvent(event);\r\n    }\r\n}\r\n","export default {\r\n    items: [],\r\n    display: 'value',\r\n    current: null,\r\n    parent: null,\r\n    maxHeight: 0,\r\n    sort: true,\r\n    order: 'desc',\r\n    placeholder: 'Select items',\r\n    more: '(+{X} more)'\r\n};\r\n","import DomHelper from './dom-component.js';\nimport defaults from './defaults.js';\n\nconst d = document;\n\nexport default class MultiSelect extends DomHelper {\n    constructor(element, options = {}) {\n        super(element, options, defaults);\n\n        if (this.options.sort) {\n            this.options.items = this._sortItems(options.items);\n        }\n\n        this.options.items = options.items && options.items.length\n            ? this._convertItems(options.items)\n            : [];\n\n        if (options.current && options.current.length) {\n            options.current = this._convertItems(options.current);\n            this._setSelected(options.current);\n        }\n\n        this._renderInit();\n\n        this._setResultMessage();\n\n        this._bindEvents();\n    }\n\n    /**\n     * Bind the delegated dom events\n     * @private\n     */\n    _bindEvents() {\n        this.on('keyup', e => {\n            if (e.key === 'Escape' || e.keyCode === 27) this.toggle(false);\n        }, d);\n\n        this.on('click', e => {\n            if (e.target.classList.contains('si-item')) return this._setCurrent(e)._setResultMessage();\n            if (!this.dom.el.contains(e.target)) return this.toggle(false);\n            this.toggle();\n        }, d);\n    }\n\n    /**\n     * Get all items in the list\n     * @return {Object[]}\n     * @public\n     */\n    getItems() {\n        return Array.from(this.options.items.values());\n    }\n\n    /**\n     * Return the current field value object\n     * @param {string} key Only return a specific value from each current item\n     * @return {[]|null}\n     * @public\n     */\n    getCurrent(key = '') {\n        let items = this.getItems().filter(i => i.selected);\n        return !key ? items : items.map(i => i[key]);\n    }\n\n    /**\n     * @todo do better: setCurrent, _setCurrent & _setSelected ...\n     * @param {*|!object} currents\n     * @public\n     */\n    setCurrent(currents) {\n        let items = this.options.items,\n            display = this.options.display;\n\n        currents = Array.isArray(currents) ? currents : [currents];\n        currents = this._convertItems(currents);\n\n        currents.forEach(current => {\n            items.forEach((item, key) => {\n                if (item[display] === current[display]) {\n                    this.dom.el.querySelector(`.si-item[data-key=\"${key}\"]`).classList.add('si-selected');\n                    item.selected = true;\n                }\n            });\n        });\n\n        this._setResultMessage();\n    }\n\n    /**\n     * Find an item in the list\n     * @param {HTMLElement|String|Number} item\n     * @return {{}}\n     * @public\n     */\n    findItem(item) {\n        let display = this.options.display;\n        item = item.nodeName ? item.dataset.value : item;\n        return this.options.items.find(i => i[display] === item);\n    }\n\n    /**\n     *\n     * @param {Event} e\n     * @param {boolean} trigger\n     * @private\n     */\n    _setCurrent(e, trigger = true) {\n        let el = e.target,\n            key = parseInt(el.dataset.key, 10),\n            item = this.options.items.get(key);\n\n        item.selected = el.classList.toggle('si-selected');\n        this.options.items.set(key, item);\n        if (trigger) this._trigger('change', item);\n        return this;\n    }\n\n    /**\n     * Loop over the passed array to set selected items\n     * @param {array} currents\n     * @private\n     */\n    _setSelected(currents) {\n        let items = this.options.items,\n            display = this.options.display;\n\n        currents.forEach(current => {\n            items.forEach(item => {\n                if (item[display] === current[display]) {\n                    item.selected = true;\n                }\n            });\n        });\n    }\n\n    /**\n     * Display selection result message\n     * @private\n     */\n    _setResultMessage() {\n        let selection = this.getCurrent(),\n            display = this.options.display,\n            count = selection.length,\n            result = '';\n\n        switch (count) {\n            case 1:\n                result = selection[0][display];\n                break;\n            case 0:\n                result = this.options.placeholder;\n                break;\n            default:\n                result = /({X})/.test(this.options.more)\n                    ? `${selection[0][display]} ${this.options.more.replace('{X}', count - 1)}`\n                    : this.options.more;\n        }\n\n        this.dom.result.classList[count ? 'add' : 'remove']('si-selection');\n        this.dom.result.innerHTML = result;\n    }\n\n    /**\n     * Make an array of object if needed\n     * @todo better 'selected' checking: what if `current` is array of objects\n     * @param {Array} items\n     * @return {Map<Object>}\n     * @private\n     */\n    _convertItems(items = []) {\n        let display = this.options.display,\n            map = new Map(),\n            key = 0;\n\n        items.forEach(item => {\n            if (typeof item !== 'object') item = {[display]: item};\n            map.set(key++, item);\n        });\n\n        return map;\n    }\n\n    /**\n     * Create the HTML upon instantiation\n     * @return {Node}\n     * @private\n     */\n    _renderInit() {\n        let frag = d.createDocumentFragment();\n\n        this.dom.el.classList.add('si-off', 'si-wrap');\n        this.dom.result = frag.appendChild(this._renderResultDiv());\n\n        frag.appendChild(this._renderList());\n        return this.dom.el.appendChild(frag);\n    }\n\n    /**\n     * Create the selection result element\n     * @return {HTMLElement}\n     * @private\n     */\n    _renderResultDiv() {\n        let el = d.createElement('div');\n        el.className = 'si-result';\n        return el;\n    }\n\n    /**\n     * Create the list element\n     * @return {HTMLElement}\n     * @private\n     */\n    _renderList() {\n        let wrap = d.createElement('div'),\n            el = d.createElement('ul'),\n            maxHeight = this.options.maxHeight;\n\n        wrap.className = 'si-list';\n\n        if (maxHeight) wrap.style.maxHeight = maxHeight + 'px';\n\n        el.innerHTML = this._renderListItems();\n\n        wrap.appendChild(el);\n\n        return wrap;\n    }\n\n    /**\n     * Create the list items\n     * @return {String}\n     * @private\n     */\n    _renderListItems() {\n        let items = this.options.items,\n            display = this.options.display,\n            list = '',\n            selected;\n\n        items.forEach((item, key) => {\n            selected = item.selected ? ' si-selected' : '';\n            list += `<li class=\"si-item${selected}\" data-key=\"${key}\">${item[display]}</li>`;\n        });\n\n        return list;\n    }\n\n    /**\n     * Rearrange the list\n     * @private\n     */\n    _sortItems() {\n        let order = this.options.order === 'desc' ? 1 : -1,\n            display = this.options.display;\n        this.options.items.sort((a, b) => {\n            if (a[display] < b[display]) return -order;\n            if (a[display] > b[display]) return order;\n            return 0;\n        });\n    }\n}\n"],"names":["d","document","DomComponent","[object Object]","element","options","defaults","this","Object","assign","_events","dom","el","_setElement","show","classList","undefined","toggle","event","fn","addEventListener","bind","push","name","filter","removeEventListener","parentNode","removeChild","nodeType","Error","parent","querySelector","detail","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","dispatchEvent","items","display","current","maxHeight","sort","order","placeholder","more","DomHelper","super","_sortItems","length","_convertItems","_setSelected","_renderInit","_setResultMessage","_bindEvents","on","e","key","keyCode","target","contains","_setCurrent","Array","from","values","getItems","i","selected","map","currents","isArray","forEach","item","add","nodeName","dataset","value","find","trigger","parseInt","get","set","_trigger","selection","getCurrent","count","result","test","replace","innerHTML","Map","frag","createDocumentFragment","appendChild","_renderResultDiv","_renderList","createElement","className","wrap","style","_renderListItems","list","a","b"],"mappings":"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"}