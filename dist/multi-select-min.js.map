{"version":3,"file":"multi-select-min.js","sources":["../src/dom-component.js","../src/defaults.js","../src/multi-select.js"],"sourcesContent":["const d = document;\r\n\r\nexport default class DomComponent {\r\n    constructor(element, options = {}, defaults = {}) {\r\n        this.options = Object.assign({}, defaults, options);\r\n\r\n        this._events = [];\r\n\r\n        this.dom = {\r\n            el: this._setElement(element)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Add/remove the toggling className\r\n     * @param {Boolean|undefined} show\r\n     * @return DomComponent\r\n     */\r\n    toggle(show = undefined) {\r\n        let classList = this.dom.el.classList;\r\n        if (show !== undefined) {\r\n            classList[show ? 'remove' : 'add']('si-off');\r\n            return this;\r\n        }\r\n        classList.toggle('si-off');\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Bind a (delegated) event\r\n     * @param {String} event\r\n     * @param {Function} fn\r\n     * @param {HTMLElement|Document} el\r\n     * @return DomComponent\r\n     */\r\n    on(event, fn, el = null) {\r\n\r\n        (el || this.dom.el).addEventListener(event, fn = fn.bind(this), true);\r\n\r\n        this._events.push({\r\n            name: event,\r\n            fn: fn,\r\n            el: el\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the main wrapping element\r\n     * @return {Element}\r\n     */\r\n    getElement() {\r\n        return this.dom.el;\r\n    }\r\n\r\n    /**\r\n     * Unbind all events and nullify references\r\n     * @return void\r\n     */\r\n    remove() {\r\n        this._events = this._events.filter(event => {\r\n            return (event.el || this.dom.el).removeEventListener(event.name, event.fn, true);\r\n        });\r\n        this.dom.el.parentNode.removeChild(this.dom.el);\r\n        this.dom = this.options = null;\r\n    }\r\n\r\n    /**\r\n     * Query the element in the DOM if its a string\r\n     * @param {Element|String} el\r\n     * @return {Element|null}\r\n     * @protected\r\n     */\r\n    _setElement(el) {\r\n        if (!el && !el.nodeType && typeof el !== 'string') {\r\n            throw new Error('Wrong element type provided!');\r\n        }\r\n        if (el.nodeType) return el;\r\n        return (this.options.parent || d).querySelector(el);\r\n    }\r\n\r\n    /**\r\n     * Communicate changes\r\n     * @param {String} name\r\n     * @param {Object|null} detail\r\n     * @protected\r\n     */\r\n    _trigger(name, detail = null) {\r\n        let event;\r\n\r\n        if (typeof CustomEvent === 'function') {\r\n            event = new CustomEvent(name, {\r\n                detail: detail,\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n        } else {\r\n            event = d.createEvent('CustomEvent');\r\n            event.initCustomEvent(name, true, true, detail);\r\n        }\r\n\r\n        this.dom.el.dispatchEvent(event);\r\n    }\r\n}\r\n","export default {\r\n    items: [],\r\n    display: 'value',\r\n    current: null,\r\n    parent: null,\r\n    maxHeight: 0,\r\n    sort: true,\r\n    order: 'desc',\r\n    placeholder: 'Select items',\r\n    more: '(+{X} more)'\r\n};\r\n","import DomHelper from './dom-component.js';\nimport defaults from './defaults.js';\n\nconst d = document;\n\nexport default class MultiSelect extends DomHelper {\n    constructor(element, options = {}) {\n        super(element, options, defaults);\n\n        if (this.options.sort) {\n            this.options.items = this._sortItems(options.items);\n        }\n\n        this.options.items = options.items && options.items.length\n            ? this._convertItems(options.items)\n            : [];\n\n        if (options.current && options.current.length) {\n            options.current = this._convertItems(options.current);\n            this._setSelected(options.current);\n        }\n\n        this._renderInit();\n\n        this._setResultMessage();\n\n        this._bindEvents();\n    }\n\n    /**\n     * Bind the delegated dom events\n     * @private\n     */\n    _bindEvents() {\n        // Select or just unfold the options\n        this.on('click', e => {\n            if (e.target.classList.contains('si-item')) return this._setCurrent(e)._setResultMessage();\n            this.toggle();\n        }, this.el);\n\n        // Close the dropdown if the user click outside of it\n        this.on('click', e => {\n            if (!this.dom.el.contains(e.target)) return this.toggle(false);\n        }, d);\n\n        // Fold up the dropdown if the user presses the Escape key\n        this.on('keyup', e => {\n            if (e.key === 'Escape' || e.keyCode === 27) this.toggle(false);\n        }, d);\n    }\n\n    /**\n     * Get all items in the list\n     * @return {Object[]}\n     * @public\n     */\n    getItems() {\n        return Array.from(this.options.items.values());\n    }\n\n    /**\n     * Return the current field value object\n     * @param {string} key Only return a specific value from each current item\n     * @return {[]|null}\n     * @public\n     */\n    getCurrent(key = '') {\n        let items = this.getItems().filter(i => i.selected);\n        return !key ? items : items.map(i => i[key]);\n    }\n\n    /**\n     * @todo do better: setCurrent, _setCurrent & _setSelected ...\n     * @param {*|!object} currents\n     * @public\n     */\n    setCurrent(currents) {\n        let items = this.options.items,\n            display = this.options.display;\n\n        currents = Array.isArray(currents) ? currents : [currents];\n        currents = this._convertItems(currents);\n\n        currents.forEach(current => {\n            items.forEach((item, key) => {\n                if (item[display] === current[display]) {\n                    this.dom.el.querySelector(`.si-item[data-key=\"${key}\"]`).classList.add('si-selected');\n                    item.selected = true;\n                }\n            });\n        });\n\n        this._setResultMessage();\n    }\n\n    /**\n     * Find an item in the list\n     * @param {HTMLElement|String|Number} item\n     * @return {{}}\n     * @public\n     */\n    findItem(item) {\n        let display = this.options.display;\n        item = item.nodeName ? item.dataset.value : item;\n        return this.options.items.find(i => i[display] === item);\n    }\n\n    /**\n     *\n     * @param {Event} e\n     * @param {boolean} trigger\n     * @private\n     */\n    _setCurrent(e, trigger = true) {\n        let el = e.target,\n            key = parseInt(el.dataset.key, 10),\n            item = this.options.items.get(key);\n\n        item.selected = el.classList.toggle('si-selected');\n        this.options.items.set(key, item);\n        if (trigger) this._trigger('change', item);\n        return this;\n    }\n\n    /**\n     * Loop over the passed array to set selected items\n     * @param {array} currents\n     * @private\n     */\n    _setSelected(currents) {\n        let items = this.options.items,\n            display = this.options.display;\n\n        currents.forEach(current => {\n            items.forEach(item => {\n                if (item[display] === current[display]) {\n                    item.selected = true;\n                }\n            });\n        });\n    }\n\n    /**\n     * Display selection result message\n     * @private\n     */\n    _setResultMessage() {\n        let selection = this.getCurrent(),\n            display = this.options.display,\n            count = selection.length,\n            result = '';\n\n        switch (count) {\n            case 1:\n                result = selection[0][display];\n                break;\n            case 0:\n                result = this.options.placeholder;\n                break;\n            default:\n                result = /({X})/.test(this.options.more)\n                    ? `${selection[0][display]} ${this.options.more.replace('{X}', count - 1)}`\n                    : this.options.more;\n        }\n\n        this.dom.result.classList[count ? 'add' : 'remove']('si-selection');\n        this.dom.result.innerHTML = result;\n    }\n\n    /**\n     * Make an array of object if needed\n     * @todo better 'selected' checking: what if `current` is array of objects\n     * @param {Array} items\n     * @return {Map<Object>}\n     * @private\n     */\n    _convertItems(items = []) {\n        let display = this.options.display,\n            map = new Map(),\n            key = 0;\n\n        items.forEach(item => {\n            if (typeof item !== 'object') item = {[display]: item};\n            map.set(key++, item);\n        });\n\n        return map;\n    }\n\n    /**\n     * Create the HTML upon instantiation\n     * @return {Node}\n     * @private\n     */\n    _renderInit() {\n        let frag = d.createDocumentFragment();\n\n        this.dom.el.classList.add('si-off', 'si-wrap');\n        this.dom.result = frag.appendChild(this._renderResultDiv());\n\n        frag.appendChild(this._renderList());\n        return this.dom.el.appendChild(frag);\n    }\n\n    /**\n     * Create the selection result element\n     * @return {HTMLElement}\n     * @private\n     */\n    _renderResultDiv() {\n        let el = d.createElement('div');\n        el.className = 'si-result';\n        return el;\n    }\n\n    /**\n     * Create the list element\n     * @return {HTMLElement}\n     * @private\n     */\n    _renderList() {\n        let wrap = d.createElement('div'),\n            el = d.createElement('ul'),\n            maxHeight = this.options.maxHeight;\n\n        wrap.className = 'si-list';\n\n        if (maxHeight) wrap.style.maxHeight = maxHeight + 'px';\n\n        el.innerHTML = this._renderListItems();\n\n        wrap.appendChild(el);\n\n        return wrap;\n    }\n\n    /**\n     * Create the list items\n     * @return {String}\n     * @private\n     */\n    _renderListItems() {\n        let items = this.options.items,\n            display = this.options.display,\n            list = '',\n            selected;\n\n        items.forEach((item, key) => {\n            selected = item.selected ? ' si-selected' : '';\n            list += `<li class=\"si-item${selected}\" data-key=\"${key}\">${item[display]}</li>`;\n        });\n\n        return list;\n    }\n\n    /**\n     * Rearrange the list\n     * @private\n     */\n    _sortItems() {\n        let order = this.options.order === 'desc' ? 1 : -1,\n            display = this.options.display;\n        this.options.items.sort((a, b) => {\n            if (a[display] < b[display]) return -order;\n            if (a[display] > b[display]) return order;\n            return 0;\n        });\n    }\n}\n"],"names":["d","document","items","display","current","parent","maxHeight","sort","order","placeholder","more","[object Object]","element","options","defaults","this","Object","assign","_events","dom","el","_setElement","show","classList","undefined","toggle","event","fn","addEventListener","bind","push","name","filter","removeEventListener","parentNode","removeChild","nodeType","Error","querySelector","detail","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","dispatchEvent","super","_sortItems","length","_convertItems","_setSelected","_renderInit","_setResultMessage","_bindEvents","on","e","target","contains","_setCurrent","key","keyCode","Array","from","values","getItems","i","selected","map","currents","isArray","forEach","item","add","nodeName","dataset","value","find","trigger","parseInt","get","set","_trigger","selection","getCurrent","count","result","test","replace","innerHTML","Map","frag","createDocumentFragment","appendChild","_renderResultDiv","_renderList","createElement","className","wrap","style","_renderListItems","list","a","b"],"mappings":"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"}